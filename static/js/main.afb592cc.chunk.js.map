{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","key","process","secret","axios","pinJSONToIPFS","JSONBody","a","console","log","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","message","pinFileToIPFS","metadata","JSON","stringify","name","keyvalues","exampleKey","append","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary","web3","createAlchemyWeb3","contract","contractAddress","checkCurrentNetwork","window","ethereum","request","method","chainId","changeNetwork","params","code","mintNFT","url","description","recipient","trim","status","Object","image","pinataResponse","tokenURI","eth","Contract","abi","selectedAddress","methods","estimateGas","encodeABI","transactionParameters","to","from","gasLimit","txHash","connectWallet","addressArray","obj","address","target","href","getCurrentWalletConnected","length","uploadImageToIPFS","FormData","Minter","props","useState","walletAddress","setWallet","network","setNetwork","setStatus","setName","setDescription","setRecipient","setURL","on","_chainId","networkName","selectedImageForUploadImage","setSelectedImageForUploadImage","isImageSelectedForUploadImage","setIsImageSelectedForUploadImage","useEffect","networkButtonPressed","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","accounts","formData","assetUrl","className","onClick","String","substring","type","onChange","event","files","src","URL","createObjectURL","alt","height","placeholder","value","rel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afb592cc.chunk.js","sourcesContent":["require('dotenv').config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require('axios')\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  console.log('PinToIPFS')\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log('Sucess' + response)\n      return {\n        success: true,\n        pinataUrl:\n          'https://gateway.pinata.cloud/ipfs/' + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n\nexport const pinFileToIPFS = (data) => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`\n\n  //we gather a local file for this example, but any valid readStream source will work here.\n  //let data = new FormData()\n  //data.append('file', fs.createReadStream('./yourfile.png'))\n\n  //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\n  //metadata is osptional\n  const metadata = JSON.stringify({\n    name: 'testname',\n    keyvalues: {\n      exampleKey: 'exampleValue',\n    },\n  })\n  data.append('pinataMetadata', metadata)\n\n  //pinataOptions are optional\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [\n        {\n          id: 'FRA1',\n          desiredReplicationCount: 1,\n        },\n        {\n          id: 'NYC1',\n          desiredReplicationCount: 2,\n        },\n      ],\n    },\n  })\n  data.append('pinataOptions', pinataOptions)\n\n  return axios\n    .post(url, data, {\n      maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log('Sucess' + response)\n      return {\n        success: true,\n        pinataUrl:\n          'https://gateway.pinata.cloud/ipfs/' + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n","import { pinJSONToIPFS, pinFileToIPFS } from './pinata.js'\n\nrequire('dotenv').config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3')\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contract = require('../artifacts/contracts/MyNFT.sol/MyNFT.json')\nconst contractAddress = '0x6584f79c5146031Ffc36b38d6d6C8F3ebAa4CBD5'\n\nexport const checkCurrentNetwork = async () => {\n  if (typeof web3 !== 'undefined') {\n    //console.log(window.ethereum.currentProvider)\n    // Use Mist/MetaMask's provider\n    //var web3js = new Web3(web3.currentProvider)\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' })\n\n    console.log(chainId)\n    switch (chainId) {\n      case '0x1':\n        console.log('This is mainnet')\n        return 'Mainnet'\n        break\n      case '0x3':\n        console.log('This is Ropsten')\n        return 'Ropsten'\n        break\n      case '0x4':\n        console.log('This is Rinkeby')\n        return 'Rinkeby'\n        break\n      case '0x89':\n        console.log('This is Matic Mainnet')\n        return 'Matic'\n        break\n      case '00x13881x89':\n        console.log('This is Mumbai Testnet')\n        return 'Mumbai'\n        break\n      case '0x61':\n        console.log('This is BSC Testnet')\n        return 'BSC Testnet'\n        break\n      case '0x38':\n        console.log('This is BSC Mainnet')\n        return 'BSC'\n        break\n      default:\n        console.log('This is an unknown network.')\n    }\n  }\n}\n\nexport const changeNetwork = async () => {\n  try {\n    console.log('Try Swtich Network')\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: '0xf00' }],\n    })\n  } catch (switchError) {\n    // This error code indicates that the chain has not been added to MetaMask.\n    if (switchError.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [\n            {\n              //To Rinkeby\n              chainId: '0x4',\n            },\n          ],\n        })\n      } catch (addError) {\n        // handle \"add\" error\n      }\n    }\n    // handle other \"switch\" errors\n  }\n}\n\nexport const mintNFT = async (url, name, description, recipient) => {\n  if (url.trim() == '' || name.trim() == '' || description.trim() == '') {\n    return {\n      success: false,\n      status: '❗Please make sure all fields are completed before minting.',\n    }\n  }\n\n  //make metadata\n  const metadata = new Object()\n  metadata.name = name\n  metadata.image = url\n  metadata.description = description\n\n  //make pinata call\n  const pinataResponse = await pinJSONToIPFS(metadata)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: '😢 Something went wrong while uploading your tokenURI.',\n    }\n  }\n\n  const tokenURI = pinataResponse.pinataUrl\n\n  window.contract = await new web3.eth.Contract(contract.abi, contractAddress)\n  //set up your Ethereum transaction\n\n  /*const gasEstimate = await window.contract.methods\n    .mintNFT(window.ethereum.selectedAddress, tokenURI)\n    .estimateGas() // estimate gas\n*/\n\n  if (recipient.trim() == '') {\n    recipient = window.ethereum.selectedAddress\n  }\n\n  // TODO: How to estimate Gas Price?\n  console.log(\n    'Estimate Gas ',\n    await window.contract.methods.mintNFT(recipient, tokenURI).estimateGas(),\n  )\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods.mintNFT(recipient, tokenURI).encodeABI(), //make call to NFT smart contract\n    gasLimit: await window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .estimateGas(),\n  }\n\n  //sign the transaction via Metamask\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    })\n    return {\n      success: true,\n      status:\n        '✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/' +\n        txHash,\n      txHash: txHash,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: '😥 Something went wrong: ' + error.message,\n    }\n  }\n}\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n      const obj = {\n        status: 'Write a message in the text-field below.',\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_accounts',\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: 'Write a message in the text-field below.',\n        }\n      } else {\n        return {\n          address: '',\n          status: '🦊 Connect to Metamask using the top right button.',\n        }\n      }\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\nexport const uploadImageToIPFS = async (data) => {\n  //make pinata call\n  const pinataResponse = await pinFileToIPFS(data)\n  console.log('Log:' + pinataResponse.pinataUrl)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: '😢 Something went wrong while uploading your tokenURI.',\n    }\n  }\n  return {\n    success: true,\n    pinataUrl: pinataResponse.pinataUrl,\n  }\n}\n","import { useEffect, useState } from 'react'\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n  uploadImageToIPFS,\n  changeNetwork,\n  checkCurrentNetwork,\n} from './utils/interact'\n\nconst FormData = require('form-data')\n\nconst Minter = (props) => {\n  //State variables\n  const [walletAddress, setWallet] = useState('')\n  const [network, setNetwork] = useState('')\n  const [status, setStatus] = useState('')\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [url, setURL] = useState('')\n\n  //Detects network change\n  window.ethereum.on('chainChanged', handleChainChanged)\n  function handleChainChanged(_chainId) {\n    // We recommend reloading the page, unless you must do otherwise\n    //window.location.reload()\n    //\n    var networkName = ''\n    switch (_chainId) {\n      case '0x1':\n        console.log('This is mainnet')\n        networkName = 'Mainnet'\n        break\n      case '0x3':\n        console.log('This is Ropsten')\n        networkName = 'Ropsten'\n        break\n      case '0x4':\n        console.log('This is Rinkeby')\n        networkName = 'Rinkeby'\n        break\n      case '0x89':\n        console.log('This is Matic Mainnet')\n        networkName = 'Matic'\n        break\n      case '00x13881x89':\n        console.log('This is Mumbai Testnet')\n        networkName = 'Mumbai'\n        break\n      case '0x61':\n        console.log('This is BSC Testnet')\n        networkName = 'BSC Testnet'\n        break\n      case '0x38':\n        console.log('This is BSC Mainnet')\n        networkName = 'BSC'\n        break\n      default:\n        console.log('This is an unknown network.')\n    }\n\n    setNetwork(networkName)\n  }\n\n  //Images\n  const [\n    selectedImageForUploadImage,\n    setSelectedImageForUploadImage,\n  ] = useState()\n  const [\n    isImageSelectedForUploadImage,\n    setIsImageSelectedForUploadImage,\n  ] = useState(false)\n  const changeHandlerForUploadImage = (event) => {\n    setSelectedImageForUploadImage(event.target.files[0])\n    setIsImageSelectedForUploadImage(true)\n  }\n\n  useEffect(async () => {\n    //TODO: implement\n    const { address, status } = await getCurrentWalletConnected()\n    await networkButtonPressed()\n    setWallet(address)\n    setStatus(status)\n    addWalletListener()\n  }, [])\n\n  const networkButtonPressed = async () => {\n    const networkName = await checkCurrentNetwork()\n    setNetwork(networkName)\n  }\n\n  const connectWalletPressed = async () => {\n    //TODO: implement\n    const walletResponse = await connectWallet()\n\n    setStatus(walletResponse.status)\n    setWallet(walletResponse.address)\n  }\n\n  const onMintPressed = async () => {\n    const { status } = await mintNFT(url, name, description, recipient)\n    setStatus(status)\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0])\n          setStatus('👆🏽 Write a message in the text-field below.')\n        } else {\n          setWallet('')\n          setStatus('🦊 Connect to Metamask using the top right button.')\n        }\n      })\n    } else {\n      setStatus(\n        <p>\n          {' '}\n          🦊{' '}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>,\n      )\n    }\n  }\n\n  async function uploadImage() {\n    if (!isImageSelectedForUploadImage) return\n\n    //const api = `${API_BASE_URL}/image`\n\n    const formData = new FormData()\n    formData.append('file', selectedImageForUploadImage)\n\n    const response = await uploadImageToIPFS(formData)\n\n    if (response.success) {\n      console.log('Here IPFS Hash: ' + response.pinataUrl)\n      const assetUrl = response.pinataUrl\n      setURL(assetUrl)\n    }\n\n    // fetch(api, {\n    //   method: 'POST',\n    //   body: formData,\n    // })\n    //   .then((response) => response.json())\n    //   .then((result) => {\n    //     console.log(`${api} success`, result)\n    //     setTestApiResponse(JSON.stringify(result))\n    //   })\n    //   .catch((error) => {\n    //     console.log(`${api} error: `, error)\n    //     setTestApiResponse(JSON.stringify(error))\n    //   })\n  }\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          'Connected: ' +\n          String(walletAddress).substring(0, 6) +\n          '...' +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n      <button id=\"networkButton\" onClick={networkButtonPressed}>\n        {network.length > 0 ? network : <span>Network</span>}\n      </button>\n\n      <br></br>\n      <p id=\"status\">{status}</p>\n      <p>Simply upload the image, then press \"Mint.\"</p>\n      <button id=\"switchNetworkButton\" onClick={changeNetwork}>\n        <span>Switch Network to Rinkeby</span>\n      </button>\n\n      <h2>Step.1 Upload your Image to IPFS.</h2>\n      <p>Select an Image and upload. </p>\n      <input type=\"file\" name=\"file\" onChange={changeHandlerForUploadImage} />\n      {isImageSelectedForUploadImage ? (\n        <div>\n          {/* <p>Filename: {selectedImageForUploadImage.name}</p>\n          <p>Filetype: {selectedImageForUploadImage.type}</p>\n          <p>Size in bytes: {selectedImageForUploadImage.size}</p>\n          <p>\n            lastModifiedDate:{' '}\n            {selectedImageForUploadImage.lastModifiedDate.toLocaleDateString()}\n          </p> */}\n          <p>\n            <img\n              src={URL.createObjectURL(selectedImageForUploadImage)}\n              alt=\"alternatetext\"\n              height=\"300\"\n            />\n          </p>\n          <p>Click the button to upload.</p>\n          <button onClick={uploadImage}>Upload image</button>\n        </div>\n      ) : (\n        <p>Select a image file to show details</p>\n      )}\n\n      <form>\n        <h2>Step.2 Write something about this NFT</h2>\n        <p>Name: </p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <p>Description: </p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n        <h2>Step.3 Check your Preview </h2>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n          Check your image\n        </a>\n        <p>Or link to another image URL:</p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          value={url}\n          onChange={(event) => setURL(event.target.value)}\n        />\n\n        <h2>Step.4 Set recipient</h2>\n        <p>Gives NFT to:</p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. 0x26Ea0b1d8a0258265Ca5e838cb8a161E5d709031 ;)\"\n          value={walletAddress}\n          onChange={(event) => setRecipient(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">{status}</p>\n    </div>\n  )\n}\n\nexport default Minter\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}