{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","key","process","secret","axios","pinJSONToIPFS","JSONBody","a","console","log","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","message","pinFileToIPFS","metadata","JSON","stringify","name","keyvalues","exampleKey","append","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary","web3","createAlchemyWeb3","contract","contractAddress","changeNetworkIDtoName","chainId","checkCurrentNetwork","window","ethereum","request","method","changeNetwork","networkID","params","code","networkConfigurable","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","mintNFT","url","description","recipient","trim","status","Object","image","pinataResponse","tokenURI","eth","Contract","abi","selectedAddress","methods","estimateGas","encodeABI","transactionParameters","to","from","gasLimit","txHash","connectWallet","addressArray","obj","address","target","href","getCurrentWalletConnected","length","uploadImageToIPFS","FormData","Home","useState","walletAddress","setWallet","network","setNetwork","setStatus","setName","setDescription","setRecipient","setURL","selectedImageForUploadImage","setSelectedImageForUploadImage","isImageSelectedForUploadImage","setIsImageSelectedForUploadImage","useEffect","networkButtonPressed","addWalletListener","on","handleChainChanged","networkName","connectWalletPressed","walletResponse","onMintPressed","onSwitchNewtorkClicked","e","value","accounts","_chainId","result","formData","assetUrl","className","Container","Row","Col","sm","onSubmit","onChange","type","event","files","placeholder","rel","Button","variant","onClick","String","substring","size","src","URL","createObjectURL","alt","height","Minter","props","About","Users","App","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f01ec45e.chunk.js","sourcesContent":["require('dotenv').config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require('axios')\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  console.log('PinToIPFS')\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log('Sucess' + response)\n      return {\n        success: true,\n        pinataUrl:\n          'https://gateway.pinata.cloud/ipfs/' + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n\nexport const pinFileToIPFS = (data) => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`\n\n  //we gather a local file for this example, but any valid readStream source will work here.\n  //let data = new FormData()\n  //data.append('file', fs.createReadStream('./yourfile.png'))\n\n  //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\n  //metadata is osptional\n  const metadata = JSON.stringify({\n    name: 'testname',\n    keyvalues: {\n      exampleKey: 'exampleValue',\n    },\n  })\n  data.append('pinataMetadata', metadata)\n\n  //pinataOptions are optional\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [\n        {\n          id: 'FRA1',\n          desiredReplicationCount: 1,\n        },\n        {\n          id: 'NYC1',\n          desiredReplicationCount: 2,\n        },\n      ],\n    },\n  })\n  data.append('pinataOptions', pinataOptions)\n\n  return axios\n    .post(url, data, {\n      maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log('Sucess' + response)\n      return {\n        success: true,\n        pinataUrl:\n          'https://gateway.pinata.cloud/ipfs/' + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n","import { pinJSONToIPFS, pinFileToIPFS } from './pinata.js'\nrequire('dotenv').config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3')\nconst web3 = createAlchemyWeb3(alchemyKey)\nconst contract = require('../artifacts/contracts/MyNFT.sol/MyNFT.json')\nconst contractAddress = '0x6584f79c5146031Ffc36b38d6d6C8F3ebAa4CBD5'\n\nexport const changeNetworkIDtoName = async (chainId) => {\n  console.log('changeNetworkIDtoName')\n  switch (chainId) {\n    case '0x1':\n      console.log('This is mainnet')\n      return 'Mainnet'\n    case '0x3':\n      console.log('This is Ropsten')\n      return 'Ropsten'\n    case '0x4':\n      console.log('This is Rinkeby')\n      return 'Rinkeby'\n    case '0x89':\n      console.log('This is Matic Mainnet')\n      return 'Matic'\n    case '0x13881':\n      console.log('This is Mumbai Testnet')\n      return 'Mumbai'\n    case '0x61':\n      console.log('This is BSC Testnet')\n      return 'BSC Testnet'\n    case '0x38':\n      console.log('This is BSC Mainnet')\n      return 'BSC'\n    default:\n      console.log('This is an unknown network.')\n  }\n}\nexport const checkCurrentNetwork = async () => {\n  if (typeof web3 !== 'undefined') {\n    //console.log(window.ethereum.currentProvider)\n    //Use Mist/MetaMask's provider\n    //var web3js = new Web3(web3.currentProvider)\n\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' })\n    console.log(chainId)\n    switch (chainId) {\n      case '0x1':\n        console.log('This is mainnet')\n        return 'Mainnet'\n        break\n      case '0x3':\n        console.log('This is Ropsten')\n        return 'Ropsten'\n        break\n      case '0x4':\n        console.log('This is Rinkeby')\n        return 'Rinkeby'\n        break\n      case '0x89':\n        console.log('This is Matic Mainnet')\n        return 'Matic'\n        break\n      case '0x13881':\n        console.log('This is Mumbai Testnet')\n        return 'Mumbai'\n        break\n      case '0x61':\n        console.log('This is BSC Testnet')\n        return 'BSC Testnet'\n        break\n      case '0x38':\n        console.log('This is BSC Mainnet')\n        return 'BSC'\n        break\n      default:\n        console.log('This is an unknown network.')\n    }\n  }\n}\n\nexport const changeNetwork = async (networkID) => {\n  try {\n    //Try Swtich Network, if chainId is exisit in Metamask, no need to add network.\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: networkID }],\n    })\n  } catch (switchError) {\n    // This error code indicates that the chain has not been added to MetaMask.\n    // Need add the configurables below.\n    if (switchError.code === 4902) {\n      console.log('Found out need add new network')\n      try {\n        var networkConfigurable\n        switch (networkID) {\n          case '0x89':\n            networkConfigurable = [\n              {\n                chainId: '0x89',\n                chainName: 'Matic Mainnet',\n                rpcUrls: ['https://rpc-mainnet.maticvigil.com/'],\n                nativeCurrency: {\n                  name: 'MATIC',\n                  symbol: 'MATIC',\n                  decimals: 18,\n                },\n                blockExplorerUrls: ['https://polygonscan.com/'],\n              },\n            ]\n            break\n          case '00x13881':\n            networkConfigurable = [\n              {\n                chainId: '0x13881',\n                chainName: 'Mumbai Testnet',\n                rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n                nativeCurrency: {\n                  name: 'MATIC',\n                  symbol: 'MATIC',\n                  decimals: 18,\n                },\n                blockExplorerUrls: ['https://mumbai.polygonscan.com/'],\n              },\n            ]\n            break\n          case '0x61':\n            networkConfigurable = [\n              {\n                chainId: '0x61',\n                chainName: 'BSC Testnet',\n                rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],\n                nativeCurrency: {\n                  name: 'Binance Coin',\n                  symbol: 'BNB',\n                  decimals: 18,\n                },\n                blockExplorerUrls: ['https://testnet.bscscan.com'],\n              },\n            ]\n            break\n          case '0x38':\n            networkConfigurable = [\n              {\n                chainId: '0x38',\n                chainName: 'Smart Chain',\n                rpcUrls: ['https://bsc-dataseed.binance.org'],\n                nativeCurrency: {\n                  name: 'Binance Coin',\n                  symbol: 'BNB',\n                  decimals: 18,\n                },\n                blockExplorerUrls: ['https://bscscan.com'],\n              },\n            ]\n            break\n          default:\n            console.log('This is an unknown network.')\n        }\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: networkConfigurable,\n        })\n      } catch (addError) {\n        // handle \"add\" error\n      }\n    }\n    // handle other \"switch\" errors\n  }\n}\n\nexport const mintNFT = async (url, name, description, recipient) => {\n  if (url.trim() == '' || name.trim() == '' || description.trim() == '') {\n    return {\n      success: false,\n      status: '❗Please make sure all fields are completed before minting.',\n    }\n  }\n\n  //make metadata\n  const metadata = new Object()\n  metadata.name = name\n  metadata.image = url\n  metadata.description = description\n\n  //make pinata call\n  const pinataResponse = await pinJSONToIPFS(metadata)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: '😢 Something went wrong while uploading your tokenURI.',\n    }\n  }\n\n  const tokenURI = pinataResponse.pinataUrl\n\n  console.log('Token URI:', tokenURI)\n  window.contract = await new web3.eth.Contract(contract.abi, contractAddress)\n  //set up your Ethereum transaction\n\n  /*const gasEstimate = await window.contract.methods\n    .mintNFT(window.ethereum.selectedAddress, tokenURI)\n    .estimateGas() // estimate gas\n*/\n\n  if (recipient.trim() == '') {\n    recipient = window.ethereum.selectedAddress\n  }\n\n  // TODO: How to estimate Gas Price?\n  console.log(\n    'Estimate Gas ',\n    await window.contract.methods.mintNFT(recipient, tokenURI).estimateGas(),\n  )\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods.mintNFT(recipient, tokenURI).encodeABI(), //make call to NFT smart contract\n    gasLimit: await window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .estimateGas(),\n  }\n\n  //sign the transaction via Metamask\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    })\n    return {\n      success: true,\n      status:\n        '✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/' +\n        txHash,\n      txHash: txHash,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: '😥 Something went wrong: ' + error.message,\n    }\n  }\n}\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n      const obj = {\n        status: 'Write a message in the text-field below.',\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_accounts',\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: 'Write a message in the text-field below.',\n        }\n      } else {\n        return {\n          address: '',\n          status: '🦊 Connect to Metamask using the top right button.',\n        }\n      }\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\nexport const uploadImageToIPFS = async (data) => {\n  //make pinata call\n  const pinataResponse = await pinFileToIPFS(data)\n  console.log('Log:' + pinataResponse.pinataUrl)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: '😢 Something went wrong while uploading your tokenURI.',\n    }\n  }\n  return {\n    success: true,\n    pinataUrl: pinataResponse.pinataUrl,\n  }\n}\n","import { useEffect, useState } from 'react'\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n  uploadImageToIPFS,\n  changeNetwork,\n  checkCurrentNetwork,\n  changeNetworkIDtoName,\n} from './utils/interact'\n\n// or less ideally\nimport { Button, Container, Row, Col } from 'react-bootstrap'\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nconst FormData = require('form-data')\n\nconst Minter = (props) => {\n  return <Home />\n}\n\nfunction Home() {\n  //State variables\n  const [walletAddress, setWallet] = useState('')\n  const [network, setNetwork] = useState('')\n  const [status, setStatus] = useState('')\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [url, setURL] = useState('')\n  const [\n    selectedImageForUploadImage,\n    setSelectedImageForUploadImage,\n  ] = useState()\n  const [\n    isImageSelectedForUploadImage,\n    setIsImageSelectedForUploadImage,\n  ] = useState(false)\n  const changeHandlerForUploadImage = (event) => {\n    setSelectedImageForUploadImage(event.target.files[0])\n    setIsImageSelectedForUploadImage(true)\n  }\n\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected()\n    await networkButtonPressed()\n    setWallet(address)\n    setStatus(status)\n    addWalletListener()\n    window.ethereum.on('chainChanged', handleChainChanged)\n  }, [])\n\n  const networkButtonPressed = async () => {\n    const networkName = await checkCurrentNetwork()\n    setNetwork(networkName)\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet()\n    setStatus(walletResponse.status)\n    setWallet(walletResponse.address)\n  }\n\n  const onMintPressed = async () => {\n    const { status } = await mintNFT(url, name, description, recipient)\n    setStatus(status)\n  }\n\n  const onSwitchNewtorkClicked = async (e) => {\n    console.log(e.target.value)\n    changeNetwork(e.target.value)\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0])\n          setStatus('👆🏽 Write a message in the text-field below.')\n        } else {\n          setWallet('')\n          setStatus('🦊 Connect to Metamask using the top right button.')\n        }\n      })\n    } else {\n      setStatus(\n        <p>\n          {' '}\n          🦊{' '}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>,\n      )\n    }\n  }\n\n  //Detects network change\n  function handleChainChanged(_chainId) {\n    // We recommend reloading the page, unless you must do otherwise\n    //window.location.reload()\n    changeNetworkIDtoName(_chainId).then((result) => {\n      {\n        //console.log('set' + result)\n        setNetwork(result)\n      }\n    })\n  }\n\n  async function uploadImage() {\n    if (!isImageSelectedForUploadImage) return\n    const formData = new FormData()\n    formData.append('file', selectedImageForUploadImage)\n\n    const response = await uploadImageToIPFS(formData)\n\n    if (response.success) {\n      console.log('Here IPFS Hash: ' + response.pinataUrl)\n      const assetUrl = response.pinataUrl\n      setURL(assetUrl)\n    }\n  }\n  return (\n    <div className=\"Minter\">\n      <Container>\n        <Row>\n          <Col sm={8}>\n            <p id=\"status\">{status}</p>\n            <span>Please switch Network to Rinkeby</span>\n            <form onSubmit={() => {}}>\n              <label>\n                Choose your network:\n                <select onChange={onSwitchNewtorkClicked}>\n                  <option value=\"0x1\">Ethereum Mainnet</option>\n                  <option value=\"0x4\">Rinkeby Network</option>\n                  <option value=\"0x38\">BSC Mainnet</option>\n                  <option value=\"0x61\">BSC Testnet</option>\n                  <option value=\"0x89\">Polygon</option>\n                  <option value=\"0x13881\">Mumbai Network</option>\n                </select>\n              </label>\n            </form>\n            <h2>Step.1 Upload your Image to IPFS.</h2>\n            <p>Select an Image and upload. </p>\n            <input\n              type=\"file\"\n              name=\"file\"\n              onChange={changeHandlerForUploadImage}\n            />\n\n            <form>\n              <h2>Step.2 Write something about this NFT</h2>\n              <p>Name: </p>\n              <input\n                type=\"text\"\n                placeholder=\"e.g. My first NFT!\"\n                onChange={(event) => setName(event.target.value)}\n              />\n              <p>Description: </p>\n              <input\n                type=\"text\"\n                placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n                onChange={(event) => setDescription(event.target.value)}\n              />\n              <h2>Step.3 Check your Preview </h2>\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                Check your image\n              </a>\n              <p>Or check the link below:</p>\n              <input\n                type=\"text\"\n                placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n                value={url}\n                onChange={(event) => setURL(event.target.value)}\n              />\n              <h2>Step.4 Set recipient</h2>\n              <p>Gives NFT to:</p>\n              <input\n                type=\"text\"\n                placeholder=\"e.g. 0x26Ea0b1d8a0258265Ca5e838cb8a161E5d709031 ;)\"\n                value={walletAddress}\n                onChange={(event) => setRecipient(event.target.value)}\n              />\n            </form>\n\n            <Button variant=\"outline-dark\" onClick={onMintPressed}>\n              Mint NFT\n            </Button>\n            <p id=\"status\">{status}</p>\n          </Col>\n          <Col sm={4}>\n            {' '}\n            <Button\n              variant=\"secondary\"\n              id=\"networkButton\"\n              onClick={networkButtonPressed}\n            >\n              {network.length > 0 ? network : <span>Network</span>}\n            </Button>\n            <Button\n              variant=\"primary\"\n              id=\"walletButton\"\n              onClick={connectWalletPressed}\n            >\n              {walletAddress.length > 0 ? (\n                'Connected: ' +\n                String(walletAddress).substring(0, 6) +\n                '...' +\n                String(walletAddress).substring(38)\n              ) : (\n                <span>Connect Wallet</span>\n              )}\n            </Button>\n            {isImageSelectedForUploadImage ? (\n              <div>\n                <p>Size in bytes: {selectedImageForUploadImage.size}</p>\n                <p>\n                  <img\n                    src={URL.createObjectURL(selectedImageForUploadImage)}\n                    alt=\"alternatetext\"\n                    height=\"300\"\n                  />\n                </p>\n                <p>Click the button to upload.</p>\n                <Button onClick={uploadImage}>Upload image</Button>\n              </div>\n            ) : (\n              <p>Select a image file to show details</p>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nfunction About() {\n  return <h2>About</h2>\n}\n\nfunction Users() {\n  return <h2>Users</h2>\n}\n\nexport default Minter\n","import './App.css'\nimport Minter from './Minter'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Navbar, Container, Nav, NavDropdown } from 'react-bootstrap'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          {/* <Link to=\"/\">Home </Link>\n          <Link to=\"/about\">About Us </Link>\n          <Link to=\"/users\">Users </Link> */}\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Container>\n              <Navbar.Brand href=\"/\">DXT</Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"me-auto\">\n                  <Nav.Link href=\"/minter\">Minter</Nav.Link>\n                  <Nav.Link href=\"/about\">About</Nav.Link>\n                </Nav>\n              </Navbar.Collapse>\n            </Container>\n          </Navbar>\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/users\">\n              <Users />\n            </Route>\n            <Route path=\"/minter\">\n              <Minter />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  )\n}\n\nfunction About() {\n  return <h2>About</h2>\n}\n\nfunction Users() {\n  return <h2>Users</h2>\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}