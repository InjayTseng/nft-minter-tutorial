{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","key","process","secret","axios","pinJSONToIPFS","JSONBody","a","console","log","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","message","pinFileToIPFS","metadata","JSON","stringify","name","keyvalues","exampleKey","append","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary","web3","createAlchemyWeb3","contract","contractAddress","mintNFT","url","description","recipient","trim","status","Object","image","pinataResponse","tokenURI","eth","Contract","abi","window","ethereum","selectedAddress","methods","estimateGas","encodeABI","transactionParameters","to","from","gasLimit","request","method","params","txHash","connectWallet","addressArray","obj","address","target","href","getCurrentWalletConnected","length","uploadImageToIPFS","FormData","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setRecipient","setURL","selectedImageForUploadImage","setSelectedImageForUploadImage","isImageSelectedForUploadImage","setIsImageSelectedForUploadImage","useEffect","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","on","accounts","formData","assetUrl","className","onClick","String","substring","type","onChange","event","files","src","URL","createObjectURL","alt","height","placeholder","value","rel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.746af670.chunk.js","sourcesContent":["require('dotenv').config()\nconst key = process.env.REACT_APP_PINATA_KEY\nconst secret = process.env.REACT_APP_PINATA_SECRET\n\nconst axios = require('axios')\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n  //making axios POST request to Pinata ⬇️\n  console.log('PinToIPFS')\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log('Sucess' + response)\n      return {\n        success: true,\n        pinataUrl:\n          'https://gateway.pinata.cloud/ipfs/' + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n\nexport const pinFileToIPFS = (data) => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`\n\n  //we gather a local file for this example, but any valid readStream source will work here.\n  //let data = new FormData()\n  //data.append('file', fs.createReadStream('./yourfile.png'))\n\n  //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\n  //metadata is osptional\n  const metadata = JSON.stringify({\n    name: 'testname',\n    keyvalues: {\n      exampleKey: 'exampleValue',\n    },\n  })\n  data.append('pinataMetadata', metadata)\n\n  //pinataOptions are optional\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [\n        {\n          id: 'FRA1',\n          desiredReplicationCount: 1,\n        },\n        {\n          id: 'NYC1',\n          desiredReplicationCount: 2,\n        },\n      ],\n    },\n  })\n  data.append('pinataOptions', pinataOptions)\n\n  return axios\n    .post(url, data, {\n      maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log('Sucess' + response)\n      return {\n        success: true,\n        pinataUrl:\n          'https://gateway.pinata.cloud/ipfs/' + response.data.IpfsHash,\n      }\n    })\n    .catch(function (error) {\n      console.log(error)\n      return {\n        success: false,\n        message: error.message,\n      }\n    })\n}\n","import { pinJSONToIPFS, pinFileToIPFS } from './pinata.js'\n\nrequire('dotenv').config()\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3')\nconst web3 = createAlchemyWeb3(alchemyKey)\n\nconst contract = require('../artifacts/contracts/MyNFT.sol/MyNFT.json')\nconst contractAddress = '0x6584f79c5146031Ffc36b38d6d6C8F3ebAa4CBD5'\n\nexport const mintNFT = async (url, name, description, recipient) => {\n  if (url.trim() == '' || name.trim() == '' || description.trim() == '') {\n    return {\n      success: false,\n      status: '❗Please make sure all fields are completed before minting.',\n    }\n  }\n\n  //make metadata\n  const metadata = new Object()\n  metadata.name = name\n  metadata.image = url\n  metadata.description = description\n\n  //make pinata call\n  const pinataResponse = await pinJSONToIPFS(metadata)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: '😢 Something went wrong while uploading your tokenURI.',\n    }\n  }\n\n  const tokenURI = pinataResponse.pinataUrl\n\n  window.contract = await new web3.eth.Contract(contract.abi, contractAddress)\n  //set up your Ethereum transaction\n\n  /*const gasEstimate = await window.contract.methods\n    .mintNFT(window.ethereum.selectedAddress, tokenURI)\n    .estimateGas() // estimate gas\n*/\n\n  if (recipient.trim() == '') {\n    recipient = window.ethereum.selectedAddress\n  }\n\n  // TODO: How to estimate Gas Price?\n  console.log(\n    'Estimate Gas ',\n    await window.contract.methods.mintNFT(recipient, tokenURI).estimateGas(),\n  )\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods.mintNFT(recipient, tokenURI).encodeABI(), //make call to NFT smart contract\n    gasLimit: await window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .estimateGas(),\n  }\n\n  //sign the transaction via Metamask\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters],\n    })\n    return {\n      success: true,\n      status:\n        '✅ Check out your transaction on Etherscan: https://rinkeby.etherscan.io/tx/' +\n        txHash,\n      txHash: txHash,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: '😥 Something went wrong: ' + error.message,\n    }\n  }\n}\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n      const obj = {\n        status: 'Write a message in the text-field below.',\n        address: addressArray[0],\n      }\n      return obj\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_accounts',\n      })\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: 'Write a message in the text-field below.',\n        }\n      } else {\n        return {\n          address: '',\n          status: '🦊 Connect to Metamask using the top right button.',\n        }\n      }\n    } catch (err) {\n      return {\n        address: '',\n        status: '😥 ' + err.message,\n      }\n    }\n  } else {\n    return {\n      address: '',\n      status: (\n        <span>\n          <p>\n            {' '}\n            🦊{' '}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    }\n  }\n}\nexport const uploadImageToIPFS = async (data) => {\n  //make pinata call\n  const pinataResponse = await pinFileToIPFS(data)\n  console.log('Log:' + pinataResponse.pinataUrl)\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: '😢 Something went wrong while uploading your tokenURI.',\n    }\n  }\n  return {\n    success: true,\n    pinataUrl: pinataResponse.pinataUrl,\n  }\n}\n","import { useEffect, useState } from 'react'\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n  uploadImageToIPFS,\n} from './utils/interact'\n\nconst FormData = require('form-data')\n\nconst Minter = (props) => {\n  //State variables\n  const [walletAddress, setWallet] = useState('')\n  const [status, setStatus] = useState('')\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [recipient, setRecipient] = useState('')\n  const [url, setURL] = useState('')\n\n  //Images\n  const [\n    selectedImageForUploadImage,\n    setSelectedImageForUploadImage,\n  ] = useState()\n  const [\n    isImageSelectedForUploadImage,\n    setIsImageSelectedForUploadImage,\n  ] = useState(false)\n  const changeHandlerForUploadImage = (event) => {\n    setSelectedImageForUploadImage(event.target.files[0])\n    setIsImageSelectedForUploadImage(true)\n  }\n\n  useEffect(async () => {\n    //TODO: implement\n    const { address, status } = await getCurrentWalletConnected()\n    setWallet(address)\n    setStatus(status)\n    addWalletListener()\n  }, [])\n\n  const connectWalletPressed = async () => {\n    //TODO: implement\n    const walletResponse = await connectWallet()\n    setStatus(walletResponse.status)\n    setWallet(walletResponse.address)\n  }\n\n  const onMintPressed = async () => {\n    const { status } = await mintNFT(url, name, description, recipient)\n    setStatus(status)\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0])\n          setStatus('👆🏽 Write a message in the text-field below.')\n        } else {\n          setWallet('')\n          setStatus('🦊 Connect to Metamask using the top right button.')\n        }\n      })\n    } else {\n      setStatus(\n        <p>\n          {' '}\n          🦊{' '}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>,\n      )\n    }\n  }\n\n  async function uploadImage() {\n    if (!isImageSelectedForUploadImage) return\n\n    //const api = `${API_BASE_URL}/image`\n\n    const formData = new FormData()\n    formData.append('file', selectedImageForUploadImage)\n\n    const response = await uploadImageToIPFS(formData)\n\n    if (response.success) {\n      console.log('Here IPFS Hash: ' + response.pinataUrl)\n      const assetUrl = response.pinataUrl\n      setURL(assetUrl)\n    }\n\n    // fetch(api, {\n    //   method: 'POST',\n    //   body: formData,\n    // })\n    //   .then((response) => response.json())\n    //   .then((result) => {\n    //     console.log(`${api} success`, result)\n    //     setTestApiResponse(JSON.stringify(result))\n    //   })\n    //   .catch((error) => {\n    //     console.log(`${api} error: `, error)\n    //     setTestApiResponse(JSON.stringify(error))\n    //   })\n  }\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          'Connected: ' +\n          String(walletAddress).substring(0, 6) +\n          '...' +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n      <br></br>\n      <p id=\"status\">{status}</p>\n      <p>Simply upload the image, then press \"Mint.\"</p>\n      <h2>Step.1 Upload your Image to IPFS.</h2>\n      <p>Select an Image and upload. </p>\n      <input type=\"file\" name=\"file\" onChange={changeHandlerForUploadImage} />\n      {isImageSelectedForUploadImage ? (\n        <div>\n          {/* <p>Filename: {selectedImageForUploadImage.name}</p>\n          <p>Filetype: {selectedImageForUploadImage.type}</p>\n          <p>Size in bytes: {selectedImageForUploadImage.size}</p>\n          <p>\n            lastModifiedDate:{' '}\n            {selectedImageForUploadImage.lastModifiedDate.toLocaleDateString()}\n          </p> */}\n          <p>\n            <img\n              src={URL.createObjectURL(selectedImageForUploadImage)}\n              alt=\"alternatetext\"\n              height=\"300\"\n            />\n          </p>\n          <p>Click the button to upload.</p>\n          <button onClick={uploadImage}>Upload image</button>\n        </div>\n      ) : (\n        <p>Select a image file to show details</p>\n      )}\n\n      <form>\n        <h2>Step.2 Write something about this NFT</h2>\n        <p>Name: </p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <p>Description: </p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n        <h2>Step.3 Check your Preview </h2>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n          Check your image\n        </a>\n        <p>Or link to another image URL:</p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          value={url}\n          onChange={(event) => setURL(event.target.value)}\n        />\n\n        <h2>Step.4 Set recipient</h2>\n        <p>Gives NFT to:</p>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. 0x26Ea0b1d8a0258265Ca5e838cb8a161E5d709031 ;)\"\n          value={walletAddress}\n          onChange={(event) => setRecipient(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">{status}</p>\n    </div>\n  )\n}\n\nexport default Minter\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}